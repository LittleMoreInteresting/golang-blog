<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kratos 实践 on Go语言入门</title>
    <link>http://blog.911015.com/kratos/</link>
    <description>Recent content in Kratos 实践 on Go语言入门</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://blog.911015.com/kratos/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>01：初始化项目</title>
      <link>http://blog.911015.com/kratos/01.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.911015.com/kratos/01.html</guid>
      <description>安装kratos及相关工具 1、kratos 安装 Copygo install github.com/go-kratos/kratos/cmd/kratos/v2@latest kratos -v # kratos version v2.6.2 2、wine 安装 Copygo install github.com/google/wire/cmd/wire@latest 3、安装 protoc 及 protoc-gen-go
protoc protoc-gen-go 4、安装 buf buf是一个用于管理和构建Protocol Buffers（protobuf）定义文件的命令行工具。它提供了一种简单而强大的方式来验证、格式化和构建protobuf定义文件，以及生成相关的代码。 Copygo install github.com/bufbuild/buf/cmd/buf@v1.23.1 buf --version 创建项目 使用 kratos new 命令创建并启动一个hello world 项目： Copykratos new kratos-admin cd kratos-admin // 下载相关依赖 go mod tidy // 构建 go get github.com/google/wire/cmd/wire@latest go generate ./... // 运行项目 kratos run 至此我们已经将一个kratos 项目的骨架搭建好了，运行成功后可以访问：http:127.0.0.1:8000/helloworld/beginner 将会得到以下结果： Copy{ &amp;#34;message&amp;#34;: &amp;#34;Hello beginner&amp;#34; } 接下来我们看一下该项目下的结构</description>
    </item>
    
    <item>
      <title>02：基础功能封装</title>
      <link>http://blog.911015.com/kratos/01.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.911015.com/kratos/01.html</guid>
      <description>Kratos入库文件 cmd//main.go 中的逻辑大致分为：
接收命令参数 创建日志对象 Logger 读取配置文件 接下来我们将这部分通用代码进行封装；代码将放到项目目录的pkg/bootstrap 下
启动参数处理 为了是程序更加灵活通常会将一些参数在程序启动时传入；比如运行环境，配置文件路径等；接下来我们已接收conf(本地 文件配置); env （运行环境如 dev 开发 ；pro 生产）;consul （consul 远程配置 地址） 三个参数为例进行封装；代码：
package bootstrap import &amp;#34;flag&amp;#34; type CommandFlags struct { Conf string // 文件配置 Env string // 运行环境 dev 开发 ；pro 生产 Consul string // consul 远程配置 地址 } func NewCommandFlags() *CommandFlags { return &amp;amp;CommandFlags{ Conf: &amp;#34;&amp;#34;, Env: &amp;#34;&amp;#34;, Consul: &amp;#34;&amp;#34;, } } func (f *CommandFlags) Init() { flag.StringVar(&amp;amp;f.Conf, &amp;#34;conf&amp;#34;, &amp;#34;.</description>
    </item>
    
  </channel>
</rss>
