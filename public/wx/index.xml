<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>公众号文章 on Go语言入门</title>
    <link>http://blog.911015.com/wx/</link>
    <description>Recent content in 公众号文章 on Go语言入门</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://blog.911015.com/wx/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go语言流程控制:Defer</title>
      <link>http://blog.911015.com/wx/2023052202.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.911015.com/wx/2023052202.html</guid>
      <description>在 Golang 中，defer 是一个关键字，用于定义延迟执行函数。它可以将一个函数推迟到当前函数返回之后执行，即使该函数出现异常或错误也不会影响 defer 定义的代码块。
常见用例 以下是 defer 的一些常见用例： 1、关闭文件资源 使用 defer 关闭文件资源是一种非常常见的方法，可以确保无论代码中发生了什么，文件都能够被关闭。
f, err := os.Open(&amp;#34;/path/to/file&amp;#34;) if err != nil { log.Fatal(err) } defer f.Close() 2、记录耗时 我们可以在开始处理某个请求前调用 time.Now() 函数来记录起始时间，然后在退出函数时计算经过的时间并打印出来。
func processRequest(req *http.Request) { start := time.Now() defer logTime(start) // 处理请求 } func logTime(start time.Time) { log.Printf(&amp;#34;request took %v&amp;#34;, time.Since(start)) } 3、锁的释放 当我们在使用互斥锁时，必须确保每次获取锁后都要及时释放锁，否则会导致死锁的情况。使用 defer 语句可以确保在任何情况下都会释放锁。
var mu sync.Mutex func someFunc() { mu.Lock() defer mu.Unlock() // 执行一些需要锁定的操作 } 注意事项 在使用 defer 时，需要注意以下几个问题：</description>
    </item>
    
    <item>
      <title>编程语言这么多怎么选？</title>
      <link>http://blog.911015.com/wx/2023052201.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.911015.com/wx/2023052201.html</guid>
      <description>Go Go是一种由Google开发的编程语言。其主要特点包括：
静态类型：在编译时检查类型，可以提供更好的代码健壮性。 并发编程：支持Goroutines（轻量级线程）和Channels（通信机制），使并发编程变得简单。 内存管理：Go具有自动垃圾回收机制，可以减少内存泄漏问题。 Go的生态系统正在快速增长，有许多优秀的开源库和框架可供使用。它非常适合云原生应用的开发，如Docker等。较新的Web框架，例如Gin和Echo，也使Go在Web开发中越来越受欢迎。 在性能方面，Go比动态语言更快，但比C++等系统级语言稍慢。 Go的学习曲线较为平稳，对于具有其他编程经验的开发人员来说相对容易上手。
PHP PHP是一种广泛用于Web开发的动态类型语言。其主要特点包括：
动态类型：无需在编写代码时指定变量类型，使代码更加灵活。 便于Web开发：PHP具有许多与Web相关的函数和库，如文件上传、会话管理等。 面向对象编程：支持面向对象编程风格，使代码更加易于维护。 PHP生态系统非常丰富，包括许多流行的Web框架和CMS平台，例如Laravel和WordPress。这些工具可使Web开发更加高效。 在性能方面，PHP比静态语言慢，但可以通过各种缓存技术（如APC和OPcache）提高性能。 PHP学习曲线相对较低，因此非常适合初学者或那些想快速入门Web开发的人选择。
Java Java是一种强类型的跨平台语言，并且具有以下特点：
静态类型：在编译时检查类型，使代码更加健壮。 跨平台：Java字节码可以在任何支持Java的操作系统上运行。 面向对象编程：支持类和对象，使得代码更易于维护。 Java的生态系统非常丰富，涵盖了众多企业应用程序框架，例如Spring和Hibernate。这些框架可帮助开发人员快速构建稳健的企业级应用程序。 在性能方面，Java比动态语言快，但启动时间较长。 相对于其他语言，Java的学习曲线中等。因为它有一个强大的库和框架生态系统，需要一些时间来理解和掌握这些技术。
Python Python是一种动态类型语言，用于各种用途，包括数据分析、机器学习、Web开发等。其主要特点包括：
动态类型：无需在编写代码时指定变量类型，使代码更灵活。 简洁易读：Python具有清晰简单的语法，使得代码易于阅读和编写。 自然语言处理和数据科学：Python具有丰富的库和工具，如NumPy、pandas和scikit-learn等，使得数据科学工作变得更加容易。 Python生态系统非常丰富，包括许多科学计算库和Web框架，例如Django和Flask。Python也是自然语言处理领域的首选语言。 在性能方面，Python比静态语言慢，但对于普通计算任务而言，其代码实现更为容易。另外，Python可以通过JIT编译器（如PyPy）提高性能。 相对于其他语言，Python的学习曲线较浅，适合初学者或那些希望快速入门数据科学或Web开发的人选择。
C++ C++是一种静态类型语言，常用于底层编程和高性能计算任务。其主要特点包括：
静态类型：在编译时检查类型，可以提供更好的代码健壮性。 高性能：C++可以直接操作硬件，因此可以实现非常高效的代码。 底层编程：C++没有自动垃圾回收机制，使得程序员需要手动管理内存，并且可以进行指针操作等底层编程技术。 C++的生态系统虽然不如其他语言那么丰富，但它有许多优秀的基础设施库和跨平台工具，如Boost和Qt等。 在性能方面，C++是最快的语言之一，因为它可以直接操作硬件和内存。 相对于其他语言，C++的学习曲线较陡峭。它需要更多的时间和精力来掌握，因为它具有底层编程技术和复杂的内存管理要求。
语言 语言特性 生态系统 性能 学习难度 Go 静态类型、并发编程、内存管理 快速增长的开源库和框架，适合云原生应用 比动态语言快，但比C++等系统级语言稍慢 中等 PHP 动态类型、便于Web开发、面向对象编程 丰富的Web生态系统，如WordPress 比静态语言慢，但可以通过各种缓存技术提高性能 简单 Java 静态类型、跨平台、面向对象编程 丰富的企业应用生态系统，如Spring、Hibernate等 比动态语言快，但启动时间较长 中等 Python 动态类型、简洁易读、自然语言处理、数据科学 丰富的科学计算生态系统，如NumPy、pandas、scikit-learn等 比静态语言慢，但普通计算任务易于实现 简单 C++ 静态类型、高性能、底层编程 丰富的基础设施生态系统，如Boost 最接近硬件的语言之一，性能最高 困难 总体而言，Go、Java和Python是比较流行的语言，它们都有丰富的生态系统，并且相对于C++来说学习难度较低。其中，Go具有出色的并发编程能力，适合云原生应用开发；Java是企业级开发的首选语言；Python则在数据科学和自然语言处理方面得到广泛应用。PHP则是一种简单易学的Web开发语言，而C++则适合底层编程和高性能计算任务。当然，选择哪种语言取决于具体的需求和项目要求。</description>
    </item>
    
    <item>
      <title>Go语言数据结构： Array 和Slice</title>
      <link>http://blog.911015.com/wx/20230523.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.911015.com/wx/20230523.html</guid>
      <description>Go语言数据结构： Array 和Slice Go 语言中的数组和切片（slice）都是用于存储一系列数据的集合，但它们之间有几个重要的区别。下面是它们的使用方法和区别：
数组 数组是一个有固定大小的数据集合，定义时需要指定其长度。数组的长度是数组类型的一部分，因此不能改变数组的大小。数组可以包含相同类型的数据，这些数据在内存中是连续的。
创建数组 var a [5]int // 定义一个长度为5，元素类型为int的数组 b := [3]string{&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;} // 定义一个长度为3，元素类型为string的数组，并初始化数组值 访问数组元素 a[0] = 1 // 给第1个元素赋值为1 x := a[2] // 获取第3个元素的值 遍历数组元素 for i, v := range a { fmt.Printf(&amp;#34;a[%d] = %d\n&amp;#34;, i, v) } 切片 切片是一个动态的数组，长度不固定，可以根据实际情况进行扩展。切片本身并不存储任何数据，它只是底层数组的引用，因此对切片的修改会影响到底层数组的内容。
创建切片 var s []int // 定义一个空的整型切片 s := []int{1, 2, 3} // 定义一个有3个元素的整型切片，并初始化数组值 访问切片元素 x := s[2] // 获取第3个元素的值 遍历切片元素 for i, v := range s { fmt.</description>
    </item>
    
    <item>
      <title> Go 语言数据结构：Maps</title>
      <link>http://blog.911015.com/wx/20230524.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.911015.com/wx/20230524.html</guid>
      <description>Golang中的Map是一种集合类型，它用于将一个键值对映射到另一个键值对。这些键值对可以是任何可比较的类型，包括内置类型和用户定义的类型，而且每个键只能在Map中出现一次。 具体来说，Map是由一组键值对组成的无序集合。每个键必须是唯一的，而不同的键可以关联到相同的值。Map通常用于需要快速查找特定键以获取相应值的场景，例如字典或计数器。
Map 基本用法 以下是使用Map的一些基本用法：
创建Map：使用make函数创建一个Map对象，同时指定键和值的类型。 myMap := make(map[string]int) 添加元素：通过键值对的方式添加元素到Map中。 myMap[&amp;#34;apple&amp;#34;] = 10 myMap[&amp;#34;orange&amp;#34;] = 5 访问元素：通过键访问Map中的元素值。 fmt.Println(myMap[&amp;#34;apple&amp;#34;]) // Output: 10 更新元素：通过键更新Map中的元素值。 myMap[&amp;#34;apple&amp;#34;] = 15 删除元素：通过键删除Map中的元素。 delete(myMap, &amp;#34;orange&amp;#34;) 遍历Map：使用for range语句遍历Map中的所有键值对,遍历是顺序是不确定的。 for key, value := range myMap { fmt.Println(key, value) } 应用场景 计数器：使用Map可以轻松实现计数器功能。例如，如果需要统计一个字符串中每个字符出现的次数，可以使用一个Map来保存每个字符及其出现次数。 str := &amp;#34;abracadabra&amp;#34; counts := make(map[rune]int) for _, c := range str { counts[c]++ } fmt.Println(counts) // Output: map[a:5 b:2 r:2 c:1 d:1] 缓存：Map也可以用作缓存，以加快应用程序的性能。例如，在Web应用程序中，可以将从数据库中检索到的数据存储在Map中，以避免重复查询相同的数据。 type User struct { ID int Name string } var cache = make(map[int]User) func getUserByID(id int) (User, error) { user, ok := cache[id] if !</description>
    </item>
    
    <item>
      <title> Go 语言数据结构：结构体</title>
      <link>http://blog.911015.com/wx/20230525.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.911015.com/wx/20230525.html</guid>
      <description>指针 Go提供了指针类型。指针保存的是一个值的内存地址。但是Go没有指针运算。 类型*T是指向T值的指针。它的零值为nil。
var p *int *&amp;amp; 运算符生成指向其操作数的指针。 **运算符表示指针的基本值。
i := 42 p = &amp;amp;i fmt.Println(*p) // read i through the pointer p *p = 21 // set i through the pointer p 结构体（Structs） Go语言中，结构体是一种用户自定义的数据类型，用于存储不同数据类型的集合 。 使用点(.)访问结构字段。 在结构体中，字段首字母的大小写决定了该字段的可见性。 定义结构体 一个结构体包含0到N个字段（Field），每个字段由字段名和类型构成；定义一个结构体的一般方式如下，
type T struct { field1 type1 field2 type2 ... } 如果个字段类型相同也可以简写成 :
type T struct {X,Y int} 创建结构体 假设我们已经定义了这样一个结构体：
type Vertex struct { X int Y int } 如何使用这个结构体呢？创建一个结构体变量常用的方法有：
定义结构体类型变量 var v1 Vertex v1.</description>
    </item>
    
    <item>
      <title> Go 语言入门：方法</title>
      <link>http://blog.911015.com/wx/20230526.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.911015.com/wx/20230526.html</guid>
      <description>方法 Methods Go没有类。但是，您可以在类型上定义方法。 方法是一个具有特殊接收器参数的函数。 接收器出现在自己的参数列表中，位于func关键字和方法名称之间。语法如下
func (t 类型) 方法名(参数名 参数类型 ...) [返回值类型]{ } 一下代码为官网示例；定义了一个 Vertex 类列；包含X Y 两个字段；定义了一个Abs 方法；计算坐标点到原点的距离。
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;math&amp;#34; ) type Vertex struct { X, Y float64 } func (v Vertex) Abs() float64 { return math.Sqrt(v.X*v.X + v.Y*v.Y) } func main() { v := Vertex{3, 4} fmt.Println(v.Abs()) } 在这个例子中，Abs方法有一个名为v的Vertex类型的接收器。 请记住：方法只是一个带有接收器参数的函数。下面的Abs是作为一个普通函数编写的，函数本身没有变化。
func Abs(v Vertex) float64 { return math.Sqrt(v.X*v.X + v.Y*v.Y) } func main() { v := Vertex{3, 4} fmt.</description>
    </item>
    
    <item>
      <title> Go 语言中的接口：Interface</title>
      <link>http://blog.911015.com/wx/20230527.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.911015.com/wx/20230527.html</guid>
      <description>Interfaces 接口类型被定义为一组方法签名。 接口类型的值可以包含实现这些方法的任何值。
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;math&amp;#34; ) type Abser interface { Abs() float64 } func main() { var a Abser f := MyFloat(-math.Sqrt2) v := Vertex{3, 4} a = f // a MyFloat implements Abser a = &amp;amp;v // a *Vertex implements Abser // In the following line, v is a Vertex (not *Vertex) // and does NOT implement Abser. a = v fmt.Println(a.Abs()) } type MyFloat float64 func (f MyFloat) Abs() float64 { if f &amp;lt; 0 { return float64(-f) } return float64(f) } type Vertex struct { X, Y float64 } func (v *Vertex) Abs() float64 { return math.</description>
    </item>
    
    <item>
      <title> Go语言泛型入门</title>
      <link>http://blog.911015.com/wx/20230528.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.911015.com/wx/20230528.html</guid>
      <description>Go语言泛型入门 Go语言在 1.18中引入了对使用参数化类型的泛型代码的新支持。泛型是一种编写代码的方式，与所使用的特定类型无关。函数和类型现在可以被编写为使用一组类型中的任何一个。本课展示了在代码中使用泛型的一些示例。
类型参数泛型 Go函数可以使用类型参数让函数支持多个类型。函数的类型参数用中括号包裹，位于函数的参数之前。
func Index[T comparable](s []T, x T) int 这个声明意味着s是任何类型T的一个切片，它满足comparable内置约束。x也是相同类型的值。 compatible是一个有用的约束，可以使用==和!=类型值上的运算符。在本例中，我们使用它将一个值与所有切片元素进行比较，直到找到匹配。此Index函数适用于任何支持比较的类型。
package main import &amp;#34;fmt&amp;#34; // Index returns the index of x in s, or -1 if not found. func Index[T comparable](s []T, x T) int { for i, v := range s { // v and x are type T, which has the comparable // constraint, so we can use == here. if v == x { return i } } return -1 } func main() { // Index works on a slice of ints si := []int{10, 20, 15, -10} fmt.</description>
    </item>
    
  </channel>
</rss>
